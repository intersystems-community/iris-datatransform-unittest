Class UnitTestHelper.Installer Extends %RegisteredObject
{

Parameter Namespace = "APP";

XData Install [ XMLNamespace = INSTALLER ]
{
<Manifest> 
        <Log Text="Creating namespace ${Namespace}" Level="0"/> 
        <Namespace Name="${Namespace}" Create="yes" Code="${Namespace}-APP" Ensemble="" Data="USER"> 
            <Configuration> 
                <Database Name="${Namespace}-APP" Dir="/app/db/APP" Create="yes" MountRequired="true" Resource="%DB_DEFAULT" PublicPermissions="RW" MountAtStartup="true"/> 
            </Configuration> 
            <Import File="/tmp/app/src/UnitTestHelper.inc" Recurse="1" Flags="cuk" />
            <Import File="/tmp/app/src/" Recurse="1" Flags="cuk" />
            <Import File="/tmp/app/install/WebTerminal-v4.9.0.xml" Recurse="1" Flags="cuk" />
        </Namespace>
</Manifest>
}

/// This is a method generator whose code is generated by XGL. 
/// Main setup method
ClassMethod RunManifest(ByRef pVars, pLogLevel As %Integer = 0, pInstaller As %Installer.Installer) As %Status [ CodeMode = objectgenerator, Internal ]
{
    Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "Install")
}

/// Entry point    
ClassMethod Run() As %Status
{
    try { 
        write "START INSTALLER",! 
        set vars("Namespace") = ..#Namespace 
        set sc = ..RunManifest(.vars) 

        // enable UnitTest Portal for APP namespace
        zn "%SYS"
        set ^SYS("Security","CSP","AllowPrefix","/csp/app/","%UnitTest")=1

        if sc {
            write !,"INSTALLER SUCCESS",!
        } else {
            do $SYSTEM.Process.Terminate($JOB,1)
        }
    } catch ex { 
        set sc = ex.AsStatus() 
        write $System.Status.GetErrorText(sc),! 
        do $SYSTEM.Process.Terminate($JOB,1) 
    } 
    quit sc
}

}
